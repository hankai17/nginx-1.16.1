
#user  nobody;
worker_processes  1;
daemon off;
master_process off; #off for debug
worker_priority -20;

worker_cpu_affinity 0001;
worker_rlimit_nofile 655350;

#error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


#load_module modules/ngx_http_modsecurity_module.so;

events {
    use epoll;
    worker_connections 100000;
}

thread_pool default threads=1 max_queue=65536;

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '"$upstream_addr" "$upstream_cache_status:DIRECT" "$upstream_connect_time" "$upstream_header_time"'
			'"$upstream_response_time" "$request_time" ';

    access_log  logs/access.log  main;

    sendfile        off;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  200;
    client_header_timeout 200s;

    #gzip  on;
    access_log on;		
    #urlencode_parse off;

    #俄制SQL转为012
    # char resp_1024[1024] = "HTTP/1.1 200 OK\r\nContent-Length: 21\r\nContent-Type: text/html; charset=koi8-r\r\n\r\ncccabcSQLghijkldefabc";
    #charset_map koi8-r window-1251 {
    #    53 30;
    #    51 31;
    #    4c 32;
    #}

    upstream log_backend {
        server 0.0.0.0:91;
    }

   	#map $status $no_cache_status {
    #    302     1;
    #    301     1;
    #    default 0;
    #} 

	map $request_uri $request_uri_path {
		"~^(?P<path>[^?]*)(\?.*)?$"  $path;
	}

    #map $content_length $no_cache_cl {
    #    "^(?:[1-9]\d{0,2}|0)?$"
    #}

    #proxy_temp_path   /usr/local/nginx/proxy_temp;
    #proxy_cache_path  /usr/local/nginx/cache levels=2:2  keys_zone=kcache:200M inactive=20m max_size=1G purger=on;
    #proxy_cache_path  /usr/local/nginx/cache levels=2:2  keys_zone=kcache:200M inactive=20m max_size=1G;
    #proxy_temp_path   /home/kswaf/forward/tengine/proxy_temp;

	geo $purge_allowed {
       default         0;  # deny from other
       127.0.0.1       1;  # allow from localhost
    }
    
    map $request_method $purge_method {
       PURGE   $purge_allowed;
       default 0;
    }

    server {
        #listen       80;
        listen       80 reuseport;
        server_name  localhost;
        #override_charset on; #map转换总开关
        #charset window-1251; #指定响应给c的字符类型

        #client_max_body_size 20m;
        client_body_buffer_size 1m;
        proxy_buffering off; #nginx针对osvc特有tunnel模型
                             #off 不会cache

        proxy_request_buffering off;

        #modsecurity on;
        #modsecurity_rules_file /usr/local/nginx/conf/modsecurity.conf;
        #subreq_intercept /subreq;

        location / {
            #limit_rate 100;
            #mirror /mirror;
            #mirror_request_body on;

            #auth_request /auth;
            #auth_request_set $user $upstream_http_x_forwarded_user;

	        proxy_pass http://0.0.0.0:90/;
            #more_set_headers "Nak: 1234567890";
            #add_header "Nak" "xx1234567890";

            #sub_filter 'abb' 'xxb';
            #sub_filter 'zzz' 'xxx';
            sub_filter 'abc' '111';
            #sub_filter '0bb' '0xb';
            sub_filter_once off;
            sub_filter_types *;
            #error_page 405 =200  $request_uri;

            #send_log_pass http://127.0.0.1:93/;
            #keepalive_timeout  0;
            root   html;
            index  index.html index.htm;
        }

        location /xxx {
            root   html;
            index  index.html index.htm;
        }

        location /200 {
            return 200;
        }

        #location /cache {
        #    proxy_buffering on;
        #    #proxy_ignore_headers X-Accel-Buffering;
        #    proxy_cache kcache;
        #    proxy_cache_key $scheme$host$request_uri_path;
        #    proxy_cache_bypass $args;
        #    proxy_no_cache $args;
		#	proxy_cache_valid 200 302 10m;
		#	proxy_cache_valid 404      1m;
		#	proxy_cache_revalidate off;
        #    #proxy_cache_purge $purge_method;
		#	proxy_cache_purge  PURGE from 127.0.0.1;
		#	#proxy_cache_purge  PURGE purge_all from 127.0.0.1;
        #    add_header X-Cache $upstream_cache_status;

        #    proxy_pass http://127.0.0.1:90;
        #}

        #location ~ /purge/(.*) {
        #    allow              127.0.0.1;
        #    deny               all;
        #    #proxy_cache        kcache;
        #    proxy_cache_purge    kcache   $1;
        #}

        #location /1cache {
        #    proxy_buffering on;
        #    #proxy_ignore_headers X-Accel-Buffering;
        #    proxy_cache kcache;
        #    proxy_cache_key $scheme$proxy_host$request_uri_path;
        #    proxy_cache_bypass $args;
        #    proxy_no_cache $args;
		#	#proxy_cache_valid 200 302 10m;
		#	#proxy_cache_valid 404      1m;
		#	#proxy_cache_revalidate off;
        #    #proxy_cache_purge $purge_method;
		#	proxy_cache_purge  PURGE from 127.0.0.1;
		#	#proxy_cache_purge  PURGE purge_all from 127.0.0.1;
        #    add_header X-Cache $upstream_cache_status;

        #    proxy_pass http://127.0.0.1:90;
        #}

        #location ~ /purge(/.*) {
        #    allow              127.0.0.1;
        #    deny               all;
        #    proxy_cache_purge  kcache $scheme$proxy_host$1;
        #}

        location /auth {
            internal;
            proxy_pass http://log_backend;
        }

        location /https {
            internal;
            proxy_pass https://0.0.0.0:443/;
        }

        location /subreq {
            internal;
            proxy_pass http://log_backend;
            proxy_set_header SUBREQ-URI $request_uri;
        }

        #location /mirror {
        #    internal;
        #    proxy_pass http://log_backend;
        #    proxy_set_header X-Original-URI $request_uri;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        listen       9529;
        server_name  localhost;
        proxy_buffering off;

        location / {
            expires      30d;
            root   html;
            index  index.html index.htm;
            #return 200 'hello world';
            return 200;
        }
    }

    #server {
    #    listen       443 ssl;
    #    server_name  www.test1.com tsl.test1.com;

    #    ssl_certificate     server1.crt;
    #    ssl_certificate_key  server1.key;
    #    location / {
    #        root /data/www;
    #    }
    #}
    #server {
    #    listen       443 ssl;
    #    server_name  www.test2.com tsl.test2.com;

    #    ssl_certificate     server2.crt;
    #    ssl_certificate_key  server2.key;
    #    location / {
    #        root /data/www;
    #    }
    #}
    #map \$ssl_server_name \$sni_string {
    #    www.test1.com server1;
    #    www.test2.com server2;
    #    #default xxx;
    #}
    #server {
    #    listen       443 ssl;

    #    ssl_certificate     \${sni_string}.crt;
    #    ssl_certificate_key  \${sni_string}.key;
    #    location / {
    #        root /data/www;
    #    }
    #}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  localhost;

        ssl_certificate      server.crt;
        ssl_certificate_key  server.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location /{
            return 200;
            root   html;
            index  index.html index.htm;
        }
    }

}
